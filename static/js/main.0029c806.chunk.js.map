{"version":3,"sources":["components/URLBox.js","components/SpamCountSelector.js","components/ErrorBox.js","components/FormInfoBox.js","utils.js","App.js","index.js"],"names":["EX_URL","URLBox","setGoogleFormURL","fetchingForm","fetchForm","className","htmlFor","InputGroup","FormControl","placeholder","aria-label","aria-describedby","id","onChange","e","target","value","Append","Button","variant","disabled","onClick","Spinner","as","animation","size","role","aria-hidden","SpamCountSelector","spamCount","setSpamCount","startSpamming","style","textAlign","type","min","max","count","Number","ErrorBox","message","Alert","Heading","FormInfoBox","formName","questions","length","map","q","getRandomText","result","characters","charactersLength","i","charAt","Math","floor","random","fetchAndProcessData","url","a","fetch","res","ok","Error","text","htmlStr","data","JSON","parse","split","formID","console","log","genrateAnswers","answers","push","optionsArray","option","submitResponse","queryString","encodeURIComponent","opts","method","mode","redirect","referrer","App","useState","googleFormURL","setFetchingForm","errorMessage","setErrorMessage","setFormID","setFormName","setQuestions","spammingProgress","setSpammingProgress","ceil","Container","ProgressBar","height","fontSize","animated","now","label","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0029c806.chunk.js","sourcesContent":["import React from \"react\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nconst EX_URL =\n  \"https://docs.google.com/forms/d/e/1FAIpQLSc_h1Sikcje0eXRNoPp0e41EKBBCXKRVzby0k5EWXaWjzPOhg/viewform\";\n\nconst URLBox = ({ setGoogleFormURL, fetchingForm, fetchForm }) => {\n  return (\n    <div>\n      <label className=\"mx-auto my-3\" htmlFor=\"google-form-url\">\n        <h3>I am Aditya the great!</h3>\n      </label>\n\n      <InputGroup className=\"mx-auto\">\n        <FormControl\n          placeholder={`For example ${EX_URL}`}\n          aria-label={`For example ${EX_URL}`}\n          aria-describedby=\"basic-addon2\"\n          id=\"google-form-url\"\n          onChange={(e) => setGoogleFormURL(e.target.value)}\n        />\n        <InputGroup.Append>\n          <Button\n            variant=\"primary\"\n            disabled={fetchingForm}\n            onClick={() => fetchForm()}\n          >\n            <Spinner\n              as=\"span\"\n              animation={fetchingForm ? \"border\" : \"false\"}\n              size=\"sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n            />\n            {` `}\n            {fetchingForm ? \"Anaylzing\" : \"Fetch\"}\n          </Button>\n        </InputGroup.Append>\n      </InputGroup>\n    </div>\n  );\n};\n\nexport default URLBox;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\n\nconst SpamCountSelector = ({ spamCount, setSpamCount, startSpamming }) => {\n  return (\n    <div>\n      <label className=\"mx-auto my-3\" htmlFor=\"spam-count\">\n        <h3>Select Number of Spam Entries to Add</h3>\n      </label>\n\n      <div className=\"d-flex align-items-center\">\n        <Button\n          variant=\"primary\"\n          disabled={spamCount <= 1}\n          onClick={() => {\n            if (spamCount > 1) {\n              setSpamCount(spamCount - 1);\n            }\n          }}\n        >\n          -\n        </Button>\n        <input\n          className=\"mx-3\"\n          style={{ textAlign: \"center\" }}\n          type=\"number\"\n          min=\"1\"\n          max=\"100\"\n          value={spamCount}\n          onChange={(e) => {\n            var count = Number(e.target.value);\n            if (count < 1 || count > 100) {\n              setSpamCount(10);\n            } else {\n              setSpamCount(count);\n            }\n          }}\n        />\n        <Button\n          variant=\"primary\"\n          disabled={spamCount >= 100}\n          onClick={() => {\n            if (spamCount < 100) {\n              setSpamCount(spamCount + 1);\n            }\n          }}\n        >\n          +\n        </Button>\n\n        <Button className=\"ml-5\" onClick={startSpamming}>\n          Start Spamming\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default SpamCountSelector;\n","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\n\nconst ErrorBox = ({ message }) => {\n  return (\n    <Alert variant=\"danger\" className=\"mx-auto my-3\">\n      <Alert.Heading>Something Went Wrong :'(</Alert.Heading>\n      <p>{`Error Message: ${message}`}</p>\n      <hr />\n      <p>\n        Please check the URL. If error persists, refresh the page or try again\n        later.\n      </p>\n    </Alert>\n  );\n};\n\nexport default ErrorBox;\n","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\n\nconst FormInfoBox = ({ formName, questions }) => {\n  return (\n    <Alert variant=\"success\" className=\"mx-auto my-3\">\n      <Alert.Heading>{`Form Name - ${formName}`}</Alert.Heading>\n\n      <p>{`${questions.length} question(s) can be spammed`}</p>\n\n      <ol>\n        {questions.map((q, id) => (\n          <li key={id}>{q[1]}</li>\n        ))}\n      </ol>\n    </Alert>\n  );\n};\n\nexport default FormInfoBox;\n","// Supported Types\n// Short Answer Field = 0\n// Paragraph Field = 1,\n// Multiple Choice Field = 2\n// Drop Down Field = 3\n// Check Boxes Field = 4\n\n// genrates random text for text based fields\nconst getRandomText = (length = 10) => {\n  var result = \"\";\n  var characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  var charactersLength = characters.length;\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};\n\n// fetches form and returns => formID, formName, questions\nexport const fetchAndProcessData = async (url) => {\n  const proxyurl = \"https://thingproxy.freeboard.io/fetch/\";\n\n  try {\n    const res = await fetch(proxyurl + url);\n\n    if (!res.ok) {\n      throw Error(\"Failed to fetch the form\");\n    }\n\n    const htmlStr = await res.text();\n    const data = JSON.parse(\n      htmlStr.split(\"var FB_PUBLIC_LOAD_DATA_ = \")[1].split(\";\")[0]\n    );\n\n    const formID = data[14].split(\"/\")[1];\n    const formName = data[3];\n    const questions = data[1][1];\n\n    return [formID, formName, questions];\n  } catch (err) {\n    console.log(err);\n    return err.message;\n  }\n};\n\n// genrates answers\nexport const genrateAnswers = (questions) => {\n  const answers = [];\n\n  for (var i = 0; i < questions.length; i++) {\n    // text based\n    if (questions[i][3] === 0 || questions[i][3] === 1) {\n      answers.push([questions[i][4][0][0], getRandomText()]);\n    }\n    // option based\n    else if (\n      questions[i][3] === 2 ||\n      questions[i][3] === 3 ||\n      questions[i][3] === 4\n    ) {\n      const optionsArray = questions[i][4][0][1];\n      const option =\n        optionsArray[Math.floor(Math.random() * optionsArray.length)];\n      answers.push([questions[i][4][0][0], option[0]]);\n    }\n  }\n\n  return answers;\n};\n\n// submit response to google form\nexport const submitResponse = async (formID, answers) => {\n  var queryString = \"/formResponse?usp=pp_url\";\n\n  for (var i = 0; i < answers.length; i++) {\n    queryString += `&entry.${answers[i][0]}=${encodeURIComponent(\n      answers[i][1]\n    )}`;\n  }\n\n  queryString += \"&submit=SUBMIT\";\n\n  var url = \"https://docs.google.com/forms/d/e/\" + formID + queryString;\n\n  var opts = {\n    method: \"POST\",\n    mode: \"no-cors\",\n    redirect: \"follow\",\n    referrer: \"no-referrer\",\n  };\n\n  return await fetch(url, opts);\n};\n","import React, { useState } from \"react\";\n\n// my components\nimport URLBox from \"./components/URLBox\";\nimport SpamCountSelector from \"./components/SpamCountSelector\";\nimport ErrorBox from \"./components/ErrorBox\";\nimport FormInfoBox from \"./components/FormInfoBox\";\n\n// bootstrap components\nimport Container from \"react-bootstrap/Container\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\n\n// utility functions\nimport { fetchAndProcessData, genrateAnswers, submitResponse } from \"./utils\";\n\nconst App = () => {\n  const [googleFormURL, setGoogleFormURL] = useState(\"\");\n  const [fetchingForm, setFetchingForm] = useState(false);\n\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const [formID, setFormID] = useState(\"\");\n  const [formName, setFormName] = useState(\"\");\n  const [questions, setQuestions] = useState([]);\n\n  const [spamCount, setSpamCount] = useState(1);\n  const [spammingProgress, setSpammingProgress] = useState(0);\n\n  const fetchForm = async () => {\n    setFetchingForm(true);\n    setErrorMessage(\"\");\n    setFormID(\"\");\n\n    const result = await fetchAndProcessData(googleFormURL);\n    if (typeof result === \"string\") {\n      setErrorMessage(result);\n    } else {\n      const [formID, formName, questions] = result;\n\n      setFormID(formID);\n      setFormName(formName);\n      setQuestions(questions);\n    }\n\n    setFetchingForm(false);\n  };\n\n  const startSpamming = async () => {\n    for (var i = 1; i <= spamCount; i++) {\n      await submitResponse(formID, genrateAnswers(questions));\n\n      setSpammingProgress(Math.ceil((i / spamCount) * 100));\n    }\n  };\n\n  return (\n    <Container>\n      <URLBox\n        setGoogleFormURL={setGoogleFormURL}\n        fetchingForm={fetchingForm}\n        fetchForm={fetchForm}\n      />\n\n      {errorMessage && <ErrorBox message={errorMessage} />}\n      {formID && <FormInfoBox formName={formName} questions={questions} />}\n\n      {formID && (\n        <SpamCountSelector\n          spamCount={spamCount}\n          setSpamCount={setSpamCount}\n          startSpamming={startSpamming}\n        />\n      )}\n      {spammingProgress !== 0 && (\n        <ProgressBar\n          style={{ height: \"30px\", fontSize: \"20px\" }}\n          className=\"mx-1 mt-3\"\n          animated\n          variant=\"success\"\n          now={spammingProgress}\n          label={`${spammingProgress}% Complete`}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}